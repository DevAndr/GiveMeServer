generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @default(autoincrement())
  email     String     @unique
  uid       String     @unique @default(uuid())
  name      String?
  role      Role       @default(USER)
  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  hash      String
  hasheRt   String?
  wishLists WishList[]

  @@id([uid, id])
  @@unique([uid, id])
  @@map("users")
}

model WishList {
  uid         String    @id @unique @default(uuid())
  name        String
  description String?
  access      Access    @default(PUBLIC)
  uidUser     String
  user        User      @relation(fields: [uidUser], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  products    Product[]

  @@unique([uidUser, uid], map: "index_uidUser_uid")
  @@map("wish-list")
}

model Product {
  name                String
  description         String?
  price               Int
  royalties           Int
  delivery            Int
  likes               Int             @default(0)
  disLikes            Int             @default(0)
  marketPlace         TypeMarketPlace
  link                String
  img                 String
  status              StatusOrder     @default(VALIDATION)
  uidWishList         String?
  uid                 String          @id @unique @default(uuid())
  labels              String[]
  uidReceiver         String?
  descriptionReceiver String?
  wishList            WishList?       @relation(fields: [uidWishList], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  Order               Order[]

  @@map("products")
}

model Order {
  uid         String      @id @unique @default(uuid())
  name        String
  description String?
  price       Int
  status      StatusOrder
  uidProduct  String
  product     Product     @relation(fields: [uidProduct], references: [uid], onDelete: Cascade, onUpdate: Cascade)

  @@map("orders")
}

model Sender {
  uid          String         @id @unique @default(uuid())
  firstName    String
  lastName     String
  email        String
  nickname     String?
  wishes       String?
  Transactions Transactions[]

  @@map("senders")
}

model Alert {
  uid         String  @id @unique @default(uuid())
  title       String
  description String?

  @@map("alerts")
}

model Rates {
  id                Int     @id @default(autoincrement())
  feePecentDelevery Decimal
  feePecentPrice    Decimal

  @@map("rates")
}

model Transactions {
  uid         String            @unique @default(uuid())
  created     DateTime          @default(now())
  senderUID   String
  sender      Sender            @relation(fields: [senderUID], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  amount      Int
  typePayment TypePayment
  status      StatusTransaction

  @@id([uid])
  @@map("transactions")
}

enum StatusTransaction {
  DONE
  FAILED
  ERROR
  CANCELED_BY_SENDER
  CANCELED_BY_PROVIDER
  PROCESSING
}

enum TypePayment {
  Cart
}

enum Access {
  PUBLIC
  PRIVATE
}

enum Role {
  USER
  ADMIN
  GUEST
}

enum TypeMarketPlace {
  OZON
  WB
  // ALIEXPRESS
}

enum StatusOrder {
  VALIDATION
  ACTIVE
  DELIVERY
  DELIVERED
  CANCELLED
  PROCESSING
  COMPLETED
  PENDING
  PAYED
}
