generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @unique @default(uuid())
  email       String     @unique
  name        String?
  role        Role       @default(USER)
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  hash        String
  hasheRt     String?
  wishLists   WishList[]
  description String?
  avatar      Bytes?
  links       String[]

  @@map("users")
}

model WishList {
  id          String    @id @unique @default(uuid())
  name        String
  description String?
  access      Access    @default(PUBLIC)
  idUser      String
  user        User      @relation(fields: [idUser], references: [id], onDelete: Cascade, onUpdate: Cascade)
  products    Product[]

  @@unique([idUser, id], map: "index_idUser_id")
  @@map("wish-list")
}

model Product {
  name             String
  description      String?
  price            Int
  royalties        Int
  delivery         Int
  likes            Int             @default(0)
  disLikes         Int             @default(0)
  marketPlace      TypeMarketPlace
  link             String
  img              String
  status           StatusProduct   @default(VALIDATION)
  id               String          @id @unique @default(uuid())
  labels           String[]
  sender           Sender?         @relation(fields: [senderId], references: [id])
  descriptionGiver String?
  idWishList       String
  wishList         WishList        @relation(fields: [idWishList], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Order            Order[]
  senderId         String?

  @@map("products")
}

model Order {
  id            String       @id @unique @default(uuid())
  createAt      DateTime     @default(now())
  updateAt      DateTime     @updatedAt
  name          String
  description   String?
  price         Int
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  status        StatusOrder
  products      Product[]
  transactionId String?

  @@map("orders")
}

model Sender {
  id           String        @id @unique @default(uuid())
  firstName    String
  lastName     String
  email        String
  nickname     String?
  wishes       String?
  transactions Transaction[]
  product      Product[]

  @@map("senders")
}

model Alert {
  id          String  @id @unique @default(uuid())
  title       String
  description String?

  @@map("alerts")
}

model Rates {
  id              Int   @id @default(autoincrement())
  feePercentPrice Float @default(0.1)

  @@map("rates")
}

model Transaction {
  id          String            @unique @default(uuid())
  createAt    DateTime          @default(now())
  updateAt    DateTime          @updatedAt
  senderId    String
  sender      Sender            @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  amount      Int
  typePayment TypePayment
  status      StatusTransaction
  Order       Order[]

  @@id([id])
  @@map("transaction")
}

enum StatusTransaction {
  DONE
  FAILED
  WAITING
  ERROR
  CANCELED_BY_SENDER
  CANCELED_BY_PROVIDER
  PROCESSING
}

enum TypePayment {
  Cart
  SBP
}

enum Access {
  PUBLIC
  PRIVATE
}

enum Role {
  USER
  ADMIN
  GUEST
}

enum TypeMarketPlace {
  OZON
  WB
  // ALIEXPRESS
}

enum StatusOrder {
  OPEN
  ACTIVE
  PROCESSING
  COMPLETED
  PENDING
  PAYED
}

enum StatusProduct {
  VALIDATION
  ACTIVE
  COMPLETED
}
